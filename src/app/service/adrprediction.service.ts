/**
 * ADR Prediction API
 * This is a API to expose Adverse Drug Reaction (ADR) preditions
 *
 * OpenAPI spec version: 1.0.3
 * Contact: sasiperis
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AdrRiskPredictionData } from '../model/adrRiskPredictionData';
import { Prediction } from '../model/prediction';

import { BASE_PATH, COLLECTION_FORMATS, ADR_PREDICTION_ENDPOINT }                     from './variables';
import { Configuration }                                     from './configuration';


@Injectable({
  providedIn: 'root'
})
export class ADRPredictionService {
    
    readonly basePath = ADR_PREDICTION_ENDPOINT;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    /* private adrPredictData: AdrRiskPredictionData = {
      age:0,
      gender: 'M',
      drugCodes: [],
      icd10Codes: []
    } */

    private _adrdata: AdrRiskPredictionData = {

      age:0,
      gender:'M',
      drugs:[],
      conditions:[]
    }
    
    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    setAdrData(adrdata: AdrRiskPredictionData) {
      
      this._adrdata = adrdata;      
      
      //throw new Error('Method not implemented.');
    }
  

    getAdrData(): AdrRiskPredictionData
    {
       return this._adrdata;
    }

    

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * makes a prediction based on the input data posted, returns the prediction data back
     * makes prediction based on the input data posted and returns the prediction
     * @param body Data required to make a prediction
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public makePrediction(body?: AdrRiskPredictionData, observe?: 'body', reportProgress?: boolean): Observable<Prediction>;
    public makePrediction(body?: AdrRiskPredictionData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Prediction>>;
    public makePrediction(body?: AdrRiskPredictionData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Prediction>>;
    public makePrediction(body?: AdrRiskPredictionData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

       /*  // authentication (application) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
                console.log("ACCESS TOKEN : " + accessToken);
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        } */

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Prediction>('post',`${this.basePath}/rsik-prediction-data`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        
    }

}
