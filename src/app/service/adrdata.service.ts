/**
 * ADR Prediction API
 * This is a API to expose Adverse Drug Reaction (ADR) preditions
 *
 * OpenAPI spec version: 1.0.3
 * Contact: sasiperis
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from './encoder';

import { throwError, Observable }                            from 'rxjs';
import { catchError, tap, shareReplay }                      from 'rxjs/operators';



import { Condition }                                         from '../model/condition';
import { Drug }                                              from '../model/drug';

import { BASE_PATH, COLLECTION_FORMATS, ADR_DATA_ENDPOINT }  from './variables';
import { Configuration }                                     from './configuration';


@Injectable({
    providedIn: 'root'
  })
export class ADRDataService {

    readonly basePath = ADR_DATA_ENDPOINT;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    conditonDataCache$:Observable<Array<Condition>> = this.getAllConditions()
    .pipe(
        tap(data => console.log('conditions:', JSON.stringify(data))),
        shareReplay(4),
        catchError(this.handleError)
    );


    drugDataCache$:Observable<Array<Drug>> = this.getAllLevel5Drugs()
    .pipe(
        tap(data => console.log('drugs:', JSON.stringify(data))),
        shareReplay(1),
        catchError(this.handleError)
    );



    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

   
    /**
     * returs top 100 conditions
     * This would retrieve all the drugs, that were ingested, from ADR DB 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllConditions(observe?: 'body', reportProgress?: boolean): Observable<Array<Condition>>;
    public getAllConditions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Condition>>>;
    public getAllConditions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Condition>>>;
    public getAllConditions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

       

       return this.httpClient.get<Array<Condition>>(`${this.basePath}/medical-conditions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
            );
      
       
    }

    /**
     * returs top 100 level5 drugs (code and name) from ADR DB
     * This would retrieve all the drugs, that were ingested, from ADR DB 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllLevel5Drugs(observe?: 'body', reportProgress?: boolean): Observable<Array<Drug>>;
    public getAllLevel5Drugs(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Drug>>>;
    public getAllLevel5Drugs(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Drug>>>;
    public getAllLevel5Drugs(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Drug>>('get',`${this.basePath}/drugs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    private handleError(err: any): Observable<never> {
        // in a real world app, we may send the server to some remote logging infrastructure
        // instead of just logging it to the console
        let errorMessage: string;
        if (err.error instanceof ErrorEvent) {
          // A client-side or network error occurred. Handle it accordingly.
          errorMessage = `An error occurred: ${err.error.message}`;
        } else {
          // The backend returned an unsuccessful response code.
          // The response body may contain clues as to what went wrong,
          errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;
        }
        console.error(err);
        return throwError(errorMessage);
      }
}
